// Generated by CoffeeScript 1.12.7
(function() {
  var autoLogin, config, db, jwt, login, logout, register, validUserExists;

  jwt = require('jsonwebtoken');

  config = require('./../config/config');

  db = require('./../libs/db');

  validUserExists = function(req, res, next) {
    var body;
    body = req.body;
    if (!body || !body.username || !body.password) {
      return next(new Error('请提交用户注册信息。'));
    }
    return db.users.findOne({
      username: body.username
    }, function(err, user) {
      if (err) {
        return next(err);
      }
      if (user) {
        return next(new Error('用户已注册，无法再次注册！'));
      }
      return next();
    });
  };

  register = function(req, res, next) {
    var body, postData;
    body = req.body;
    postData = {
      username: body.username,
      password: body.password,
      token: '',
      expiredTime: Date.now()
    };
    return db.users.insert(postData, function(err, user) {
      if (err) {
        return next(err);
      }
      return res.json(true);
    });
  };

  login = function(req, res, next) {
    var password, username;
    username = req.body.username;
    password = req.body.password;
    return db.users.findOne({
      username: username,
      password: password
    }, function(err, user) {
      var expiredTime, token;
      if (err) {
        return next(err);
      }
      if (!user) {
        return next(new Error('登录失败，请重试！未找到用户信息！'));
      }
      token = jwt.sign({
        username: username
      }, config.secret);
      expiredTime = Date.now() + 1000 * 60 * 60 * 24;
      return db.users.update({
        _id: user._id
      }, {
        $set: {
          token: token,
          expiredTime: expiredTime
        }
      }, function(err, numReplaced) {
        if (err) {
          return next(err);
        }
        if (numReplaced === 0) {
          return next(new Error('登录失败，请重试！'));
        }
        return res.json({
          token: token
        });
      });
    });
  };

  autoLogin = function(req, res, next) {
    var token;
    token = req.body.token;
    if (!token) {
      return next('缺少token');
    }
    return db.users.findOne({
      token: token,
      expiredTime: {
        $gt: Date.now()
      }
    }, function(err, user) {
      if (err) {
        return next(err);
      }
      if (!user) {
        return next('自动登录失败，请重试！');
      }
      return res.json(true);
    });
  };

  logout = function(req, res, next) {
    return db.users.update({
      _id: req.userInfo._id
    }, {
      $set: {
        token: '',
        expiredTime: Date.now()
      }
    }, function(err, numReplaced) {
      if (err) {
        return next(err);
      }
      if (numReplaced === 0) {
        return next(new Error('注销失败，请重试！'));
      }
      return res.json(true);
    });
  };

  module.exports = {
    validUserExists: validUserExists,
    register: register,
    login: login,
    logout: logout,
    autoLogin: autoLogin
  };

}).call(this);

//# sourceMappingURL=userBiz.js.map
